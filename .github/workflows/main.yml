name: CI/CD with Render Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1 libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
    
    - name: Set environment variables for tests
      run: |
        echo "KERAS_BACKEND=torch" >> $GITHUB_ENV
        echo "OMP_NUM_THREADS=1" >> $GITHUB_ENV
        echo "MKL_NUM_THREADS=1" >> $GITHUB_ENV
    
    - name: Run tests
      run: |
        PYTHONPATH=./app python tests/test_app.py
    
    - name: Test critical regression (image resizing)
      run: |
        python -c "
        import os
        os.environ['KERAS_BACKEND'] = 'torch'
        os.environ['OMP_NUM_THREADS'] = '1'
        
        import sys
        sys.path.append('app')
        from app_correct import preprocess_from_pil
        from PIL import Image
        
        # Test critique: v√©rifier qu'une image 600x600 est bien redimensionn√©e
        test_img = Image.new('RGB', (600, 600), color='red')
        processed = preprocess_from_pil(test_img)
        assert processed.shape == (1, 224, 224, 3), f'Expected (1, 224, 224, 3), got {processed.shape}'
        print('‚úÖ Test de r√©gression r√©ussi - redimensionnement OK')
        "

  # D√©ploiement uniquement si les tests passent ET sur la branche main
  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Deploy to Render
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
        api-key: ${{ secrets.MY_RENDER_API_KEY }}
        wait-for-success: true
    
    - name: Notify deployment success
      if: success()
      run: echo "üöÄ D√©ploiement r√©ussi sur Render!"
    
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "‚ùå √âchec du d√©ploiement!"
        exit 1