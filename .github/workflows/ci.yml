name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r app/requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Create necessary directories
      run: |
        mkdir -p logs
        mkdir -p static/uploads
    
    - name: Lint with flake8
      run: |
        # Arrêter le build si il y a des erreurs de syntaxe ou des noms non définis
        flake8 app --count --select=E9,F63,F7,F82 --show-source --statistics
        # Traiter tous les autres avertissements comme des avertissements
        flake8 app --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: black --check app/
    
    - name: Check import order with isort
      run: isort --check-only app/
    
    - name: Run tests with pytest
      run: |
        pytest test_app.py -v --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Test model compatibility (critical regression test)
      run: |
        python -c "
        import sys
        sys.path.append('app')
        from app_correct import model, preprocess_from_pil
        from PIL import Image
        import numpy as np
        
        # Test critique: vérifier qu'une image 600x600 ne cause pas d'erreur
        test_img = Image.new('RGB', (600, 600), color='red')
        processed = preprocess_from_pil(test_img)
        print(f'Shape après preprocessing: {processed.shape}')
        
        # Vérifier que le modèle peut faire une prédiction
        predictions = model.predict(processed, verbose=0)
        print(f'Prédiction réussie, shape: {predictions.shape}')
        print('✅ Test de régression réussi - les images de toute taille sont supportées')
        "
    
    - name: Archive test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          pytest.xml

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Bandit Security Scan
      uses: securecodewarrior/github-action-bandit@v1
      with:
        path: "app"
        level: medium
        confidence: medium
        format: json
        output_file: bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: bandit-security-scan
        path: bandit-report.json

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: |
        docker build -t flask-classifier:latest .
    
    - name: Test Docker container
      run: |
        docker run -d -p 5000:5000 --name test-container flask-classifier:latest
        sleep 10
        curl -f http://localhost:5000/ || exit 1
        docker stop test-container
        docker rm test-container

  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.security-scan.result == 'success'
      run: echo "✅ All tests passed successfully!"
    
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.security-scan.result == 'failure'
      run: |
        echo "❌ Tests failed!"
        exit 1